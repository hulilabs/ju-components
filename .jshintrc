{
    // --------------------------------------------------------------------
    // JSHint Configuration, Huli Edition
    // --------------------------------------------------------------------
    //
    // == Enforcing Options ===============================================
    //
    // These options tell JSHint to be more strict towards your code. Use
    // them if you want to allow only a safe subset of JavaScript, very
    // useful when your codebase is shared with a big number of developers
    // with different skill levels.

    "bitwise"       : true,     // Prohibit bitwise operators (&, |, ^, etc.).
    "curly"         : true,     // Require {} for every new block or scope.
    "eqeqeq"        : false,    // Require triple equals i.e. `===`.
    "forin"         : false,     // Tolerate `for in` loops without `hasOwnPrototype`.
    "immed"         : true,     // Require immediate invocations to be wrapped in parens e.g. `( function(){}() );`
    "latedef"       : true,     // Prohibit variable use before definition.
    "newcap"        : true,     // Require capitalization of all constructor functions e.g. `new F()`.
    "noarg"         : true,     // Prohibit use of `arguments.caller` and `arguments.callee`.
    "noempty"       : true,     // Prohibit use of empty blocks.
    "nonew"         : true,     // Prohibit use of constructors for side-effects.
    "plusplus"      : false,    // Prohibit use of `++` & `--`.
    "regexp"        : false,    // Prohibit `.` and `[^...]` in regular expressions.
    "undef"         : true,     // Require all non-global variables be declared before they are used.
    "strict"        : false,    // Require `use strict` pragma in every file.
    "trailing"      : true,     // Prohibit trailing whitespaces
    "unused"        : true,     // Prohibit unused files

    // == Relaxing Options ================================================
    //
    // These options allow you to suppress certain types of warnings. Use
    // them only if you are absolutely positive that you know what you are
    // doing.

    "asi"           : false,    // Tolerate Automatic Semicolon Insertion (no semicolons).
    "boss"          : false,    // Tolerate assignments inside if, for & while. Usually conditions & loops are for comparison, not assignments.
    "debug"         : false,    // Allow debugger statements e.g. browser breakpoints.
    "eqnull"        : true,    // Tolerate use of `== null`.
    "evil"          : false,    // Tolerate use of `eval`.
    "funcscope"     : false,    // Tolerate declarations of variables inside of control structures while accessing them later from the outside.
    "globalstrict"  : false,    // Allow global "use strict" (also enables 'strict').
    "iterator"      : false,    // Allow usage of __iterator__ property.
    "lastsemic"     : false,    // Tolerat missing semicolons when the it is omitted for the last statement in a one-line block.
    "laxbreak"      : false,    // Tolerate unsafe line breaks e.g. `return [\n] x` without semicolons.
    "laxcomma"      : true,    // Suppress warnings about comma-first coding style.
    "loopfunc"      : false,    // Allow functions to be defined within loops.
    "multistr"      : false,    // Tolerate multi-line strings.
    "onecase"       : true,    // Tolerate switches with just one case.
    "proto"         : false,    // Tolerate __proto__ property. This property is deprecated.
    "regexdash"     : false,    // Tolerate unescaped last dash i.e. `[-...]`.
    "scripturl"     : true,     // Tolerate script-targeted URLs.
    "smarttabs"     : false,    // Tolerate mixed tabs and spaces when the latter are used for alignmnent only.
    "shadow"        : true,    // Allows re-define variables later in code e.g. `var x=1; x=2;`.
    "sub"           : true,     // Tolerate all forms of subscript notation besides dot notation e.g. `dict['key']` instead of `dict.key`.
    "supernew"      : false,    // Tolerate `new function () { ... };` and `new Object;`.

    // == Environments ====================================================
    //
    // These options pre-define global variables that are exposed by
    // popular JavaScript libraries and runtime environmentsâ€”such as
    // browser or node.js.

    "browser"       : true,     // Standard browser globals e.g. `window`, `document`.
    "devel"         : false,    // Allow development statements e.g. `console.log();`.
    "jquery"        : true,    // Enable globals exposed by jQuery JavaScript library.
    "nonstandard"   : true,    // Define non-standard but widely adopted globals such as escape and unescape.

    // == Formatting and Complexity =======================================
    //
    // Indentation and max length work to naturally keep files small,
    // editable, and with limited complexity. The other options are a
    // strict way to enforce these.

    "indent"        : 4,        // Specify indentation spacing
    "maxdepth"      : 4,        // Maximum nested statement depth for a function

    // == Globals  ============================================

    "globals": {
        "require" : true,
        "requirejs" : true,
        "define"  : true,
        "log" : false,
        "HH" : true,
        "Logger" : true,
        // Support for incompatible browsers are provided via polyfill
        "Promise"   : true
    },

    // == Undocumented Options ============================================
    //
    // While I've found these options in [example1][2] and [example2][3]
    // they are not described in the [JSHint Options documentation][4].
    //
    // [4]: http://www.jshint.com/options/

    "maxerr"        : 100,      // Maximum errors before stopping.
    "predef"        : [         // Extra globals.
        "require",
        "define",
        "escape"
    ]
}




